/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

//can't make separate boolean function as O(n2) hence modify height function and return incase >1 difference between lh and rh
class Solution {
    
    public int heightDiff(TreeNode root)
    {
        if(root==null)
            return 0;
        //** important case missed lh and rh return child heightDiff hence they can be -1 also
        int lh = heightDiff(root.left);
        if(lh==-1)
        {
            return -1;
        }
        int rh = heightDiff(root.right);
        if(rh==-1)
        {
            return -1;
        }
        
        if(Math.abs(lh-rh)>1)
        {
            return -1;
        }
        
        return Math.max(lh,rh)+1;
    }
    
    //if returns -1 
    public boolean isBalanced(TreeNode root) {
        
              if(heightDiff(root)==-1)
                  return false;
                  
            return true;
        
        
    }
}
